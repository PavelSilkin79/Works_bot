from functools import wraps
from aiogram.types import CallbackQuery, Message
from aiogram_dialog import DialogManager
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from config_data.config import load_config
from db import models  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π



config = load_config()
OWNER_ID = config.tg_bot.owner_id


# –ü–æ–ª—É—á–µ–Ω–∏–µ user_id –∏–∑ —Å–æ–±—ã—Ç–∏—è
def get_user_id(event):
    if isinstance(event, Message) or isinstance(event, CallbackQuery):
        return event.from_user.id
    return None


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
async def answer_event(event, text: str):
    if isinstance(event, CallbackQuery):
        await event.answer(text, show_alert=True)
    elif isinstance(event, Message):
        await event.answer(text)


# üëë –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
def owner_only(handler):
    @wraps(handler)
    async def wrapper(event, *args, **kwargs):
        user_id = get_user_id(event)
        if user_id != OWNER_ID:
            await answer_event(event, "‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
            return
        return await handler(event, *args, **kwargs)
    return wrapper


# ‚úÖ –î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ –∞–¥–º–∏–Ω–æ–≤
def admin_required(handler):
    @wraps(handler)
    async def wrapper(event, *args, **kwargs):
        user_id = get_user_id(event)

        # –ï—Å–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü ‚Äî –ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É
        if user_id == OWNER_ID:
            return await handler(event, *args, **kwargs)

        # –î–æ—Å—Ç–∞—ë–º session –∏–∑ kwargs –∏–ª–∏ DialogManager
        session: AsyncSession = kwargs.get("session")
        dialog_manager: DialogManager = kwargs.get("dialog_manager")

        if not session and dialog_manager:
            session = dialog_manager.middleware_data.get("session")

        if not session:
            await answer_event(event, "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –ë–î.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ë–î
        result = await session.execute(select(Admin).where(Admin.user_id == user_id))
        admin = result.scalar_one_or_none()

        if admin is None:
            await answer_event(event, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return

        return await handler(event, *args, **kwargs)

    return wrapper
