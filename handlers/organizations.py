from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ParseMode
from aiogram_dialog import Dialog, DialogManager, StartMode, Window
from aiogram_dialog.widgets.text import Const, Format
from aiogram_dialog.widgets.kbd import Button, Column, Select, Multiselect, SwitchTo
from aiogram_dialog.widgets.input import TextInput
from sqlalchemy import select, delete, func
from models import Organization
from states.states import OrgSG, CommandSG


org_router = Router()


async def back_command(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    await dialog_manager.start(state=CommandSG.start,mode=StartMode.RESET_STACK,)

# –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–æ–º–∞–Ω–¥–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä
async def start_command(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    session_factory = dialog_manager.middleware_data.get("session_factory")
    if not session_factory:
        await callback.answer("‚ö† –û—à–∏–±–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    await dialog_manager.start(
        state=OrgSG.start,
        mode=StartMode.RESET_STACK,
        data={"session_factory": session_factory}
    )
    dialog_manager.start_data = {"session_factory": session_factory}

async def orgs_list(dialog_manager: DialogManager, **kwargs):
    session_factory = dialog_manager.middleware_data.get("session_factory")

    if not session_factory:
        await dialog_manager.done("‚ùó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return {"organizations": []}  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏

    async with session_factory() as session:
        result = await session.execute(select(Organization))
        organizations = result.scalars().all()
        if not organizations:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∫–æ–ª–±—ç–∫–∞
            event = dialog_manager.event
            if hasattr(event, "message"):
                await event.message.answer("‚ùó –°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø—É—Å—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.")
            elif hasattr(event, "callback_query"):
                await event.callback_query.message.answer("‚ùó –°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø—É—Å—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.")

            await dialog_manager.start(CommandSG.start, mode=StartMode.RESET_STACK)
            return {}

        return {"organizations": organizations}

async def show_org_info(c: CallbackQuery, button: Button, dialog_manager: DialogManager):
    session_factory = dialog_manager.middleware_data.get("session_factory")
    async with session_factory() as session:
        org_id = dialog_manager.dialog_data.get("organization_id")
        if not org_id:
            await c.answer("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.", show_alert=True)
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        org = await session.get(Organization, org_id)
        if not org:
            await c.answer("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return

        info = (
            f"üè¢ <b>{org.name}</b>\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {org.phone}\n"
            f"üìç –ê–¥—Ä–µ—Å: {org.address}\n"
            f"‚úâÔ∏è Email: {org.email}"
        )
        await c.message.answer(info, parse_mode="HTML")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
async def add_org_name(event: Message, widget: TextInput, dialog_manager: DialogManager, text: str):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    session_factory = dialog_manager.middleware_data.get("session_factory")

    async with session_factory() as session:
        existing_org = await session.execute(
            Organization.__table__.select().where(func.lower(Organization.name) == text.lower())
        )
        existing_org = existing_org.scalars().first()

        if existing_org:
            # –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            await event.answer(f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{text}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            await dialog_manager.done()
            return

    # –ï—Å–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞
    dialog_manager.dialog_data["name"] = text
    await dialog_manager.next()

async def add_org_address(event: Message, widget: TextInput, dialog_manager: DialogManager, text: str):
    dialog_manager.dialog_data["address"] = text
    await dialog_manager.next()

async def add_org_phone(event: Message, widget: TextInput, dialog_manager: DialogManager, text: str):
    dialog_manager.dialog_data["phone"] = text
    await dialog_manager.next()

async def add_org_email(event:Message, widget: TextInput, dialog_manager: DialogManager, text: str):
    session_factory = dialog_manager.middleware_data.get("session_factory")
    dialog_manager.dialog_data["email"] = text

    async with session_factory() as session:

        # –ï—Å–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
        new_org = Organization(
            name=dialog_manager.dialog_data["name"],
            phone=dialog_manager.dialog_data["phone"],
            address=dialog_manager.dialog_data["address"],
            email=dialog_manager.dialog_data["email"],
        )
        session.add(new_org)
        await session.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞
    await event.answer(f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è '{dialog_manager.dialog_data['name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await dialog_manager.done()
    await dialog_manager.start(state=CommandSG.start, mode=StartMode.RESET_STACK)


async def delete_selected_orgs(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    session_factory = dialog_manager.middleware_data.get("session_factory")

    if not session_factory:
        await callback.answer("‚ö† –û—à–∏–±–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    selected_orgs = dialog_manager.find("del_org_multi").get_checked()
    if not selected_orgs:
        await callback.answer("‚ö† –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –∏–∑ —Å—Ç—Ä–æ–∫ –≤ —á–∏—Å–ª–∞
    try:
        selected_orgs = list(map(int, selected_orgs))
    except ValueError:
        await callback.answer("‚ö† –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.")
        return

    async with session_factory() as session:
        await session.execute(delete(Organization).where(Organization.id.in_(selected_orgs)))
        await session.commit()

    await callback.answer("‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã!")
     # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ restart
    await dialog_manager.reset_stack()
    await dialog_manager.start(state=CommandSG.start)


async def save_selected_org_id(callback: CallbackQuery, select: Select, dialog_manager: DialogManager, item_id: str):
    dialog_manager.dialog_data["edit_org_id"] = int(item_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    await dialog_manager.next()  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
async def edit_org_field(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    # –ü–æ–ª—É—á–∞–µ–º id –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "name", "phone", "address", "email")
    field = button.widget_id
    dialog_manager.dialog_data["edit_field"] = field  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    await dialog_manager.next()

async def save_edited_field(event: Message, widget: TextInput, dialog_manager: DialogManager, text: str):
    edit_field = dialog_manager.dialog_data.get("edit_field")
    edit_org_id = dialog_manager.dialog_data.get("edit_org_id")

    if not edit_field:
        await event.answer("–û—à–∏–±–∫–∞: –ù–µ –≤—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    if not edit_org_id:
        await event.answer("–û—à–∏–±–∫–∞: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        return

    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    session_factory = dialog_manager.middleware_data.get("session_factory")
    async with session_factory() as session:
        result = await session.execute(select(Organization).where(Organization.id == edit_org_id))
        org = result.scalar_one_or_none()

        if org:
            setattr(org, edit_field, str(text))  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω–æ–µ –ø–æ–ª–µ
            await session.commit()
            FIELD_NAMES = {
                "address": "–ê–¥—Ä–µ—Å",
                "phone": "–¢–µ–ª–µ—Ñ–æ–Ω",
                "email": "Email",
                "name": "–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
            }
            field_label = FIELD_NAMES.get(edit_field, edit_field)
            await event.answer(
            f"‚úÖ –ü–æ–ª–µ *{field_label}* –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: *{text}*",
            parse_mode="Markdown"
            )
        else:
            await event.answer("–û—à–∏–±–∫–∞: –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    await dialog_manager.done()
    await dialog_manager.reset_stack()
    await dialog_manager.start(state=CommandSG.start)

async def save_info_org_id(callback: CallbackQuery, select: Select, dialog_manager: DialogManager, item_id: str):
    session_factory = dialog_manager.middleware_data.get("session_factory")
    async with session_factory() as session:
        org = await session.get(Organization, int(item_id))
        if not org:
            await callback.message.answer("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            text = (
                f"üè¢ <b>{org.name}</b>\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {org.phone}\n"
                f"üìç –ê–¥—Ä–µ—Å: {org.address}\n"
                f"‚úâÔ∏è Email: {org.email}"
            )
            await callback.message.answer(f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:\n{text}", parse_mode="HTML")

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    await dialog_manager.start(state=CommandSG.start)


start_dialog = Dialog(
    Window(
        Const("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"),
        Column(
            SwitchTo(Const("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"), id="info_org", state=OrgSG.info_org),
            SwitchTo(Const("‚úÖ –î–æ–±–∞–≤–∏—Ç—å"), id="add_name", state=OrgSG.add_name),
            SwitchTo(Const("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"), id="select_org", state=OrgSG.select_org),
            SwitchTo(Const("‚ùå –£–¥–∞–ª–∏—Ç—å"), id="delete_org", state=OrgSG.delete_org),
            Button(Const("üîô –ù–∞–∑–∞–¥"), id="back", on_click=back_command),
        ),
        state=OrgSG.start,
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:"),
        TextInput(id="name_input", on_success=add_org_name),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back", state=OrgSG.start),
        state=OrgSG.add_name,
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:"),
        TextInput(id="phone_input", on_success=add_org_phone),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back", state=OrgSG.start),
        state=OrgSG.add_phone,
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:"),
        TextInput(id="address_input", on_success=add_org_address),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back", state=OrgSG.start),
        state=OrgSG.add_address,
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ email –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:"),
        TextInput(id="email_input", on_success=add_org_email),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back", state=OrgSG.start),
        state=OrgSG.add_email,
    ),
    Window(
        Const("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"),
        Column(
            Multiselect(
                checked_text=Format("{item.name} ‚úÖ"),  # –ö–æ–≥–¥–∞ —ç–ª–µ–º–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω
                unchecked_text=Format("{item.name} ‚ùå"),  # –ö–æ–≥–¥–∞ —ç–ª–µ–º–µ–Ω—Ç –ù–ï –≤—ã–±—Ä–∞–Ω
                id="del_org_multi",
                item_id_getter=lambda item: item.id,  # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                items="organizations",
            )
        ),
        Button(Const("‚ùå –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ"), id="confirm_delete", on_click=delete_selected_orgs),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back", state=OrgSG.start),
        state=OrgSG.delete_org,
        getter=orgs_list,
    ),
    Window(
        Const("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"),
        Column(
            Select(
                Format("{item.name}"),  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                id="edit_org_info",
                item_id_getter=lambda item: str(item.id),  # ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π
                items="organizations",
                on_click=save_info_org_id,  # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
            )
        ),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back", state=OrgSG.start),
        state=OrgSG.info_org,
        getter=orgs_list,  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
    ),
    Window(
        Const("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"),
        Column(
            Select(
                Format("{item.name}"),  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                id="edit_org_select",
                item_id_getter=lambda item: str(item.id),  # ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π
                items="organizations",
                on_click=save_selected_org_id,  # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
            )
        ),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back", state=OrgSG.start),
        state=OrgSG.select_org,
        getter=orgs_list,  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
    ),
    Window(
        Const("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:"),
        Column(
            Button(Const("–ù–∞–∑–≤–∞–Ω–∏–µ"), id="name", on_click=edit_org_field),
            Button(Const("–¢–µ–ª–µ—Ñ–æ–Ω"), id="phone", on_click=edit_org_field),
            Button(Const("–ê–¥—Ä–µ—Å"), id="address", on_click=edit_org_field),
            Button(Const("Email"), id="email", on_click=edit_org_field),
        ),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back", state=OrgSG.select_org),
        state=OrgSG.select_field,
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"),
        TextInput(id="new_value_input", on_success=save_edited_field),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back", state=OrgSG.select_field),
        state=OrgSG.edit_field,
    ),
)

org_router.include_router(start_dialog)