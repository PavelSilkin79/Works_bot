import os
from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram_dialog import Dialog, DialogManager, StartMode, Window
from aiogram_dialog.widgets.text import Const, Format
from aiogram_dialog.widgets.kbd import SwitchTo, Column, Button, Select, Multiselect
from aiogram_dialog.widgets.input import TextInput
from sqlalchemy import select, delete, func
from .command import setup_db
from models import Welders
from states.states import WeldersSG, CommandSG


# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
PHOTO_DIR = 'photos'
os.makedirs(PHOTO_DIR, exist_ok=True)

welders_router = Router()


async def back_command(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    await dialog_manager.start(state=CommandSG.start, mode=StartMode.RESET_STACK)

# –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–æ–º–∞–Ω–¥–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä
async def start_command(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    session_factory = await setup_db()
    if not session_factory:
        await callback.answer("‚ö† –û—à–∏–±–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    await dialog_manager.start(
        state=WeldersSG.start,
        mode=StartMode.RESET_STACK,
        data={"session_factory": session_factory}
    )
    dialog_manager.start_data = {"session_factory": session_factory}


async def weld_list(dialog_manager: DialogManager, **kwargs):
    start_data = dialog_manager.start_data or {}
    session_factory = start_data.get("session_factory")

    if not session_factory:
        return {"welders": []}  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏

    async with session_factory() as session:
        result = await session.execute(select(Welders))
        organizations = result.scalars().all()
        return {"welders": welders}


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
async def add_weld_name(event: Message, widget: TextInput, dialog_manager: DialogManager, text: str):
    dialog_manager.dialog_data["name"] = text
    await dialog_manager.next()

async def add_weld_surname(event: Message, widget: TextInput, dialog_manager: DialogManager, text: str):
     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏
    session_factory = await setup_db()

    async with session_factory() as session:
        existing_weld = await session.execute(
            Welders.__table__.select().where(func.lower(Welders.name) == text.lower())
        )
        existing_weld = existing_weld.scalars().first()

        if existing_weld:
            # —Ñ–∞–º–∏–ª–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            await event.answer(f"–§–∞–º–∏–ª–∏—è '{text}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            await dialog_manager.done()
            return
    # –ï—Å–ª–∏ —Ñ–∞–º–∏–ª–∏—è  –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞
    dialog_manager.dialog_data["surname"] = text
    await dialog_manager.next()

async def add_weld_patronymic (event: Message, widget: TextInput, dialog_manager: DialogManager, text: str):
    dialog_manager.dialog_data["patronymic"] = text
    await dialog_manager.next()

async def add_weld_address(event: Message, widget: TextInput, dialog_manager: DialogManager, text: str):
    dialog_manager.dialog_data["address"] = text
    await dialog_manager.next()

async def add_weld_phone(event: Message, widget: TextInput, dialog_manager: DialogManager, text: str):
    dialog_manager.dialog_data["phone"] = text
    await dialog_manager.next()

async def add_weld_email(event:Message, widget: TextInput, dialog_manager: DialogManager, text: str):
    session_factory = await setup_db()
    dialog_manager.dialog_data["email"] = text

    async with session_factory() as session:
        new_welders= Welders(
            name=dialog_manager.dialog_data["name"],
            surname=dialog_manager.dialog_data["surname"],
            patronymic=dialog_manager.dialog_data["patronymic"],
            phone=dialog_manager.dialog_data["phone"],
            address=dialog_manager.dialog_data["address"],
            email=dialog_manager.dialog_data["email"],
        )
        session.add(new_welders)
        await session.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞
    await event.answer(f"–°–≤–∞—Ä—â–∏–∫ '{dialog_manager.dialog_data['name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")# –ù–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é
    await dialog_manager.done()
    await dialog_manager.start(state=CommandSG.start, mode=StartMode.RESET_STACK)

async def delete_selected_weld(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    start_data = dialog_manager.start_data or {}
    session_factory = start_data.get("session_factory")

    if not session_factory:
        await callback.answer("‚ö† –û—à–∏–±–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    selected_weld = dialog_manager.find("del_weld_multi").get_checked()
    if not selected_weld:
        await callback.answer("‚ö† –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Å–≤–∞—Ä—â–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –∏–∑ —Å—Ç—Ä–æ–∫ –≤ —á–∏—Å–ª–∞
    try:
        selected_welds = list(map(int, selected_welds))
    except ValueError:
        await callback.answer("‚ö† –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.")
        return

    async with session_factory() as session:
        await session.execute(delete(Welders).where(Welders.id.in_(selected_welds)))
        await session.commit()

    await callback.answer("‚úÖ –°–≤–∞—Ä—â–∏–∫–∏ —É–¥–∞–ª–µ–Ω—ã!")
     # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ restart
    await dialog_manager.reset_stack()
    await dialog_manager.start(state=CommandSG.start)


async def save_selected_weld_id(callback: CallbackQuery, select: Select, dialog_manager: DialogManager, item_id: str):
    dialog_manager.dialog_data["edit_weld_id"] = int(item_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–æ–Ω—Ç–∞–∂–Ω–∏–∫–∞
    await dialog_manager.next()  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–≤–∞—Ä—â–∏–∫–∞
async def edit_weld_field(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    # –ü–æ–ª—É—á–∞–µ–º id –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "name", "phone", "address", "email")
    field = button.widget_id
    dialog_manager.dialog_data["edit_field"] = field  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    await dialog_manager.next()

async def save_edited_field(event: Message, widget: TextInput, dialog_manager: DialogManager, text: str):
    edit_field = dialog_manager.dialog_data.get("edit_field")
    edit_org_id = dialog_manager.dialog_data.get("edit_weld_id")

    if not edit_field:
        await event.answer("–û—à–∏–±–∫–∞: –ù–µ –≤—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    if not edit_weld_id:
        await event.answer("–û—à–∏–±–∫–∞: ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        return

    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    session_factory = dialog_manager.start_data.get("session_factory")
    async with session_factory() as session:
        result = await session.execute(select(Welders).where(Welders.id == edit_weld_id))
        weld = result.scalar_one_or_none()

        if weld:
            setattr(weld, edit_field, str(text))  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω–æ–µ –ø–æ–ª–µ
            await session.commit()
            await event.answer(f"‚úÖ {edit_field.capitalize()} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {text}")
        else:
            await event.answer("–û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –æ —Å–≤–∞—Ä—â–∏–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    await dialog_manager.done()
    await dialog_manager.reset_stack()
    await dialog_manager.start(state=CommandSG.start)

welders_dialog = Dialog(
    Window(
        Const("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"),
        Column(
            SwitchTo(Const("‚úÖ –î–æ–±–∞–≤–∏—Ç—å —Å–≤–∞—Ä—â–∏–∫–∞"), id="add_name", state=WeldersSG.add_name),
            SwitchTo(Const("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"), id="select_welders", state=WeldersSG.select_weld),
            SwitchTo(Const("‚ùå –£–¥–∞–ª–∏—Ç—å"), id="delete_welders", state=WeldersSG.delete_weld),
            Button(Const("üîô –ù–∞–∑–∞–¥"), id="back", on_click=back_command),
        ),
        state=WeldersSG.start,
    ),

    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–≤–∞—Ä—â–∏–∫–∞:"),
        TextInput(id="name_input", on_success=add_weld_name),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back", state=WeldersSG.start),
        state=WeldersSG.add_name,
    ),
        Window(
        Const("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å–≤–∞—Ä—â–∏–∫–∞:"),
        TextInput(id="surname_input", on_success=add_weld_surname),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back", state=WeldersSG.start),
        state=WeldersSG.add_surname,
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ —Å–≤–∞—Ä—â–∏–∫–∞:"),
        TextInput(id="patronymic_input", on_success=add_weld_patronymic),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back", state=WeldersSG.start),
        state=WeldersSG.add_patronymic,
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω —Å–≤–∞—Ä—â–∏–∫–∞:"),
        TextInput(id="phone_input", on_success=add_weld_phone),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back", state=WeldersSG.start),
        state=WeldersSG.add_phone,
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è —Å–≤–∞—Ä—â–∏–∫–∞:"),
        TextInput(id="address_input", on_success=add_weld_address),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back", state=WeldersSG.start),
        state=WeldersSG.add_address,
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ email —Å–≤–∞—Ä—â–∏–∫–∞:"),
        TextInput(id="email_input", on_success=add_weld_email),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back", state=WeldersSG.start),
        state=WeldersSG.add_email,
    ),
    Window(
        Const("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"),
        Column(
            Multiselect(
                checked_text=Format("{item.name} ‚úÖ"),  # –ö–æ–≥–¥–∞ —ç–ª–µ–º–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω
                unchecked_text=Format("{item.name} ‚ùå"),  # –ö–æ–≥–¥–∞ —ç–ª–µ–º–µ–Ω—Ç –ù–ï –≤—ã–±—Ä–∞–Ω
                id="del_weld_multi",
                item_id_getter=lambda item: item.id,  # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                items="welders",
            )
        ),
        Button(Const("‚ùå –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ"), id="confirm_delete", on_click=delete_selected_weld),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back", state=WeldersSG.start),
        state=WeldersSG.delete_weld,
        getter=weld_list,
    ),
    Window(
        Const("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–∞—Ä—â–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"),
        Column(
            Select(
                Format("{item.name}"),  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                id="edit_weld_select",
                item_id_getter=lambda item: str(item.id),  # ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π
                items="welders",
                on_click=save_selected_weld_id,  # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
            )
        ),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back", state=WeldersSG.start),
        state=WeldersSG.select_weld,
        getter=weld_list,  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
    ),
    Window(
        Const("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:"),
        Column(
            Button(Const("–ò–º—è"), id="name", on_click=edit_weld_field),
            Button(Const("–§–∞–º–∏–ª–∏—è"), id="surname", on_click=edit_weld_field),
            Button(Const("–û—Ç—á–µ—Å—Ç–≤–æ"), id="patronymic", on_click=edit_weld_field),
            Button(Const("–¢–µ–ª–µ—Ñ–æ–Ω"), id="phone", on_click=edit_weld_field),
            Button(Const("–ê–¥—Ä–µ—Å"), id="address", on_click=edit_weld_field),
            Button(Const("Email"), id="email", on_click=edit_weld_field),
        ),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back", state=WeldersSG.select_weld),
        state=WeldersSG.select_field_weld,
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"),
        TextInput(id="new_value_input", on_success=save_edited_field),
        SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back", state=WeldersSG.select_field_weld),
        state=WeldersSG.edit_field_weld,
    ),
)

welders_router.include_router(welders_dialog)