import os
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram_dialog import Dialog, DialogManager, StartMode, Window
from aiogram_dialog.widgets.text import Const
from aiogram_dialog.widgets.kbd import Row, Button, Column, Select, Multiselect
from sqlalchemy import select
from db import init_db
from config_data.config import load_config
from models import Organization, Installers, Welders
from states.states import CommandSG, OrgSG, InstallersSG, WeldersSG

command_router = Router()

async def setup_db():
    config = load_config()
    session_factory = await init_db(config)  # –ü–æ–ª—É—á–∞–µ–º session_factory —á–µ—Ä–µ–∑ init_db
    return session_factory

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@command_router.message(CommandStart())
async def start_handler(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å", callback_data="start_dialog")]
    ])
    await message.answer(
            'üëã –ü—Ä–∏–≤–µ—Ç!–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏, –º–æ–Ω—Ç–∞–∂–Ω–∏–∫–∞–º–∏ –∏ —Å–≤–∞—Ä—â–∏–∫–∞–º–∏.\n'
            '–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å:\n'
            'üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏\n'
            'üõ† –ú–æ–Ω—Ç–∞–∂–Ω–∏–∫–æ–≤\n'
            'üîß –°–≤–∞—Ä—â–∏–∫–æ–≤\n'
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üëá",
        reply_markup=keyboard
    )

@command_router.callback_query(F.data == "start_dialog")
async def launch_dialog(callback: CallbackQuery, dialog_manager: DialogManager):
    await dialog_manager.start(state=CommandSG.start, mode=StartMode.RESET_STACK)
    await callback.answer()  # –ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"

@command_router.message(Command("help"))
async def help_command(message: Message):
    help_text = """
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    /list_organizations - üìí–°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
    /list_installers - üìí–°–ø–∏—Å–æ–∫ –º–æ–Ω—Ç–∞–∂–Ω–∏–∫–æ–≤
    /list_welders - üìí–°–ø–∏—Å–æ–∫ —Å–≤–∞—Ä—â–∏–∫–æ–≤
    """
    await message.answer(help_text)

# –í—ã–≤–æ–¥ –≤—Å–µ—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
@command_router.message(Command('list_organizations'))
async def list_organizations(message: Message, dialog_manager: DialogManager):
    session_factory = await setup_db()  # –ü–æ–ª—É—á–∞–µ–º session_factory

    async with session_factory() as session:
        result = await session.execute(select(Organization))
        organizations = result.scalars().all()

    if not organizations:
        await message.answer('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –Ω–µ—Ç')
    else:
        text = "\n".join([f"{org.id}. {org.name} ({org.phone})" for org in organizations])
        await message.answer(f"–°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π:\n{text}")

    await dialog_manager.start(state=OrgSG.start, mode=StartMode.RESET_STACK, data={"session_factory": session_factory})

@command_router.message(Command('list_installers'))
async def list_installers(message: Message, dialog_manager: DialogManager):
    session_factory = await setup_db()  # –ü–æ–ª—É—á–∞–µ–º session_factory

    async with session_factory() as session:
        result = await session.execute(select(Installers))
        installers = result.scalars().all()

    if not installers:
        await message.answer('–ú–æ–Ω—Ç–∞–∂–Ω–∏–∫–æ–≤ –Ω–µ—Ç')
    else:
        text = "\n".join([f"{inst.id}. {inst.name} ({inst.surname})" for inst in installers])
        await message.answer(f"–°–ø–∏—Å–æ–∫ –º–æ–Ω–∞–∂–Ω–∏–∫–æ–≤:\n{text}")

    await dialog_manager.start(state=InstallersSG.start, mode=StartMode.RESET_STACK, data={"session_factory": session_factory})


@command_router.message(Command('list_welders'))
async def list_welders(message: Message, dialog_manager: DialogManager):
    session_factory = await setup_db()  # –ü–æ–ª—É—á–∞–µ–º session_factory

    async with session_factory() as session:
        result = await session.execute(select(Welders))
        welders = result.scalars().all()

    if not welders:
        await message.answer('–°–≤–∞—Ä—â–∏–∫–æ–≤ –Ω–µ—Ç')
    else:
        text = "\n".join([f"{weld.id}. {weld.name} ({weld.surname})" for weld in welders])
        await message.answer(f"–°–ø–∏—Å–æ–∫ —Å–≤–∞—Ä—â–∏–∫–æ–≤:\n{text}")

    await dialog_manager.start(state=WeldersSG.start, mode=StartMode.RESET_STACK, data={"session_factory": session_factory})

async def check_and_start_org(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    session_factory = await setup_db()  # –ü–æ–ª—É—á–∞–µ–º session_factory

    async with session_factory() as session:
        result = await session.execute(select(Organization))
        organization = result.scalars().all()

        if not organization:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            dialog_manager.dialog_data["session_factory"] = session_factory
            await dialog_manager.start(state=CommandSG.empty_organization, mode=StartMode.RESET_STACK)
        else:
            await dialog_manager.start(state=OrgSG.start, mode=StartMode.RESET_STACK, data={"session_factory": session_factory})

async def check_and_start_inst(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    session_factory = await setup_db()  # –ü–æ–ª—É—á–∞–µ–º session_factory

    async with session_factory() as session:
        result = await session.execute(select(Installers))
        installers = result.scalars().all()

        if not installers:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            dialog_manager.dialog_data["session_factory"] = session_factory
            await dialog_manager.start(state=CommandSG.empty_installers, mode=StartMode.RESET_STACK)
        else:
            await dialog_manager.start(state=InstallersSG.start, mode=StartMode.RESET_STACK, data={"session_factory": session_factory})

async def check_and_start_welders(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    session_factory = await setup_db()  # –ü–æ–ª—É—á–∞–µ–º session_factory

    async with session_factory() as session:
        result = await session.execute(select(Welders))
        welders = result.scalars().all()

        if not welders:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            dialog_manager.dialog_data["session_factory"] = session_factory
            await dialog_manager.start(state=CommandSG.empty_welders, mode=StartMode.RESET_STACK)
        else:
            await dialog_manager.start(state=WeldersSG.start, mode=StartMode.RESET_STACK, data={"session_factory": session_factory})


# –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
async def go_add_org(callback: CallbackQuery, button, dialog_manager: DialogManager):
    session_factory = await setup_db()
    await dialog_manager.start(state=OrgSG.add_name, mode=StartMode.RESET_STACK, data={"session_factory": session_factory})

async def go_add_inst(callback: CallbackQuery, button, dialog_manager: DialogManager):
    session_factory = await setup_db()
    await dialog_manager.start(state=InstallersSG.add_name, mode=StartMode.RESET_STACK, data={"session_factory": session_factory})

async def go_add_welder(callback: CallbackQuery, button, dialog_manager: DialogManager):
    session_factory = await setup_db()
    await dialog_manager.start(state=WeldersSG.add_name, mode=StartMode.RESET_STACK, data={"session_factory": session_factory})

async def go_back_main(callback: CallbackQuery, button, dialog_manager: DialogManager):
    await dialog_manager.start(state=CommandSG.start, mode=StartMode.RESET_STACK)


add_dialog = Dialog(
    Window(
        Const('–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üëá'),
        Column(
            Button(Const("‚úÖ –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò"), id="org", on_click=check_and_start_org),
            Button(Const("‚úÖ –ú–û–ù–¢–ê–ñ–ù–ò–ö–ò"), id="installers", on_click=check_and_start_inst),
            Button(Const("‚úÖ –°–í–ê–†–©–ò–ö–ò"), id="welders", on_click=check_and_start_welders),
        ),
        state=CommandSG.start,
    ),
        Window(
        Const("‚ùó –°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø—É—Å—Ç. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é?"),
        Row(
            Button(Const("‚úÖ –î–∞"), id="add_org", on_click=go_add_org),
            Button(Const("üîô –ù–µ—Ç"), id="back_main", on_click=go_back_main),
        ),
        state=CommandSG.empty_organization,
    ),
    Window(
        Const("‚ùó –°–ø–∏—Å–æ–∫ —Å–≤–∞—Ä—â–∏–∫–æ–≤ –ø—É—Å—Ç. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ?"),
        Row(
            Button(Const("‚úÖ –î–∞"), id="add_welder", on_click=go_add_welder),
            Button(Const("üîô –ù–µ—Ç"), id="back_main", on_click=go_back_main),
        ),
        state=CommandSG.empty_welders,
    ),
    Window(
        Const("‚ùó –°–ø–∏—Å–æ–∫ –º–æ–Ω—Ç–∞–∂–Ω–∏–∫–æ–≤ –ø—É—Å—Ç. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ?"),
        Row(
            Button(Const("‚úÖ –î–∞"), id="add_inst", on_click=go_add_inst),
            Button(Const("üîô –ù–µ—Ç"), id="back_main", on_click=go_back_main),
        ),
        state=CommandSG.empty_installers,
    )
)

command_router.include_router(add_dialog)